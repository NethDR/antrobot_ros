TrajectoryPlannerROS:
  max_vel_x: 0.30 # defines maximum linear velocity that will be set by trajectory planner in m/s
  min_vel_x: 0.15 # defines minimum linear velocity that will be set by trajectory planner in m/s
  max_vel_theta: 3.5 # defines maximum angular velocity that will be set by trajectory planner in rad/s
  min_vel_theta: -3.5  # defines minimum angular velocity that will be set by trajectory planner in rad/s
  min_in_place_vel_theta: 0.5 # defines minimum rotational velocity allowed for the base while performing in-place rotations in rad/s

  acc_lim_theta: 0.5 # defines the angular acceleration limit of the robot in rad/s^2
  acc_lim_x: 0.05 #  the x acceleration limit of the robot in m/s^2
  acc_lim_Y: 0.0 # defines the y acceleration limit of the robot in m/s^2
  escape_vel: -0.05 # speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse.
  holonomic_robot: false # Determines whether velocity commands are generated for a holonomic or non-holonomic robot
  meter_scoring: true # compute the trajectories candidates scores in meters

  xy_goal_tolerance: 0.2 # defines the tolerance in meters for the controller in the x & y distance when achieving a goal
  yaw_goal_tolerance: 0.2 # defines the tolerance in radians for the controller in yaw/rotation when achieving its goal

  sim_time: 4.0 # the amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.15 # the step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.1 # the step size, in radians, to take between angular samples on a given trajectory.
  vx_samples: 30 # number of samples to use when exploring the x velocity space
  vy_samples: 0 # number of samples to use when exploring the y velocity space
  vth_samples: 60 # number of samples to use when exploring the theta velocity space
  controller_frequency: 20.0 # the frequency at which this controller will be called in Hz

  path_distance_bias: 0.6 # the weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  goal_distance_bias: 0.8 # the weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale: 0.04 # the weighting for how much the controller should attempt to avoid obstacles
  heading_lookahead: 0.25 # how far to look ahead in meters when scoring different in-place-rotation trajectories

BaseGlobalPlanner:
  use_dijkstra: false #Use A* instead
